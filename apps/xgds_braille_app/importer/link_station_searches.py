#!/usr/bin/env python
#  __BEGIN_LICENSE__
# Copyright (c) 2015, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All rights reserved.
#
# The xGDS platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
# __END_LICENSE__

import django
django.setup()

from django.contrib.sites.models import Site

import re
import sys
import datetime
import pytz
from dateutil.parser import parse as dateparser

from xgds_core.flightUtils import getFlight
from xgds_core.models import NamedURL

URL_PREFIX = Site.objects.get_current().domain

flight = None


def link_station_searches(filename):
    times_file = open(filename, "r")
    line = times_file.readline()
    while line:
        if line.startswith('Timestamps for'):
            if not line.endswith('_CONT\n'):
                re_matches = re.findall(r"(SCIENCE_\w*)", line)
                station_name = ""
                if len(re_matches) > 0:
                    station_name = re_matches[0]

                start_time_line = times_file.readline()
                first_data_line = times_file.readline()
                last_data_line = times_file.readline()

                # get start time
                start_time_string = start_time_line.split("  ")[-1][0:-1]
                start_time = dateparser(start_time_string).replace(tzinfo=pytz.UTC)
                formatted_start_time = start_time.strftime('%Y-%m-%dT%H%M%S.%f')

                global flight
                if not flight:
                    flight = getFlight(start_time)

                # get end time
                end_time_string = last_data_line.split("  ")[-1][0:-1]
                end_time = dateparser(end_time_string).replace(tzinfo=pytz.UTC)
                formatted_end_time = end_time.strftime('%Y-%m-%dT%H%M%S.%f')


                photos_url = "https://%s/xgds_map_server/search/Photo/flight__group:%d,flight__vehicle:1,acquisition_timezone:utc,min_acquisition_time:%s,max_acquisition_time:%s" % \
                             (URL_PREFIX, flight.group.id, formatted_start_time, formatted_end_time)

                photos_link = NamedURL(name='%s Photos' % station_name, url=photos_url, content_object=flight)
                print str(photos_link)
                photos_link.save()

                nirvss_url = "https://%s/xgds_map_server/search/Spectrometer/flight__group:%d,flight__vehicle:1,acquisition_timezone:utc,min_acquisition_time:%s,max_acquisition_time:%s" % \
                             (URL_PREFIX, flight.group.id, formatted_start_time, formatted_end_time)
                nirvss_link = NamedURL(name='%s NIRVSS' % station_name, url=nirvss_url, content_object=flight)
                print str(nirvss_link)
                nirvss_link.save()
        line = times_file.readline()



if __name__=='__main__':
    filename = sys.argv[1]
    if not filename:
        print 'Second parameter must be the name of the file with the station times, generated by run_validate_timestamps'
        exit()
    link_station_searches(filename)
